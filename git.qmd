---
title: "Collaborating with git" 
#subtitle: "Lecture notes"
# author: "Gilles Guillot, Data Integration Department, World Organisation for Animal Health"
date: last-modified
execute: 
  eval: true
  message: false
  warning: false
format:
  html:
    # self-contained: true
    toc: true
    number-sections: true 
    toc-depth: 3
editor: 
  markdown: 
    wrap: sentence
---


# Introduction  {.unnumbered}

The present page is a guide for working with git and github from Rstudio. 
Most of the material in this page is borrowed from the freely accessible book [Happy Git and GitHub for the useR](https://happygitwithr.com) by Jennifer Bryan.


## What is git? {.unnumbered}



Git is a **version control system**.
Its original purpose was to help groups of developers work **collaboratively** on big software projects.
Git manages the evolution of a set of files,  called a repository,  in a sane, highly structured way.

**Git has been re-purposed by the data science community**.
In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code.

## What is Github? {.unnumbered}

Github is an internet hosting service for git.
They provide a home for your Git-based projects on the internet.

Git is the generic technology, github is a specific web service based on this technology (think of the pair  email/gmail).




## Basic concepts and use cases  {.unnumbered}

Git/github allow data scientsts to do things known as **clone**,  **commit**, **pull**, **push** or **branch**.
In the context of the **collaborative production of a recurent data analytics report**, this means:



* Clone: This is like making your own copy of the team’s report folder so you can work on it.

* Commit: Think of it as saving your latest edits to the report on your own computer, with a note about what you changed.


* Push: After finishing your edits, you send them back to the team so everyone else sees your updates.


* Pull: Before you start working, you get the latest version of the report from the team to make sure you’re not missing anyone’s updates.

* Branch: A branch is like working on a separate draft of the report so you can try changes without affecting the main version until it’s ready.

To work collaboratively with git under Rstudio, you will need to go through account set up, software installation and credential setting. This is described in the next sections. 

# Registering a github account

Go to <https://github.com> and create a personnal free account.

# Installing the Github desktop

Install [Github desktop](https://desktop.github.com/download/)

# Connecting Rstudio and github

## Generating a Personal Acces Token (PAT)

When we interact with GitHub, we have to include credentials in the request.
This proves we are a specific GitHub user, who’s allowed to do whatever we’re asking to do.

-   Go to <https://github.com/settings/tokens> and click “Generate token”.

<!-- * Select “repo”, “user”, and “workflow”. -->

-   Copy the generated PAT to your clipboard. Or leave that browser window open and available for a little while, so you can come back to copy the PAT.

## Store the PAT in R

In R, call gitcreds::gitcreds_set() to get a prompt where you can paste your PAT:

```{r,eval=FALSE}
# install.packages(gitcreds)
gitcreds::gitcreds_set()
```

Paste your PAT in response to the dialogue in the console:

```{r,eval=FALSE}
? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-> Adding new credentials...
-> Removing credentials from cache...
-> Done.
```

You should be able to work with GitHub now.

# Creating your first repository

## Creating a repository on github (optional)

This step is skipped if you start working on a project with an existing repo on github.

Go to <https://github.com> and make sure you are logged in.

Near “Repositories”, click the big green “New” button.
Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.

How to fill this in:

-   Repository template: **No template**
-   Repository name: **myrepo** or whatever you wish (we’ll delete this soon).
-   Description: “Repository for testing my Git/GitHub setup” or similar. It’s nice to have something here, so you’ll see it appear in the README.
-   **Private**
-   Initialize this repository with: **Add a README file**

Click the big green button that says `Create repository`.

Now click the big green button that says “\<\> Code”.

Copy the https URL to your clipboard.

## Clone the repo to your local computer

-   In Rstudio, start a new Project, click on `File > New Project > Version Control > Git`

-   In the `repository URL` paste the URL of your new GitHub repository.
    It will be something like this https://github.com/myname/myrepo.git.

-   Accept the default project directory name, e.g. myrepo, which coincides with the GitHub repo name.

-   Take charge of – or at least notice!
    – where the Project will be saved locally.
    A common rookie mistake is to have no idea where you are saving files or what your working directory is.
    Pay attention.
    Be intentional.
    Personally, I store this in a folder named `Clones_repos` at the root of my MS365 Cloud folder, so generically: `C:\Users\myname\OneDrive - World Organisation For Animal Health\Clones_repos>`

-   I suggest you check “Open in new session”, as that’s what you’ll usually do in real life.

-   Click “Create Project”.

You should find yourself in a new local RStudio Project that represents your test repo on GitHub.
This should download the README.md file from GitHub.
Look in RStudio’s file browser pane for the README.md file.

## Alternative way to clone to your local computer with R commands

The sequence of clicking steps described in the section above can be implemented alternatively in two lines of R code:

```{r,eval=FALSE}
install.packages("usethis") # unless it is already installed
usethis::create_from_github(repo_spec="https://github.com/mynqme/myrepo.git",
                            destdir = "C:\Users\myname\OneDrive - World Organisation For Animal Health\Clones_repos")
```

# References {.unnumbered}


- [Happy Git and GitHub for the useR](https://happygitwithr.com),  Jennifer Bryan.   
